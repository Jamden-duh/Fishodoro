@{
    ViewData["Title"] = "To-Do List";
}

<div class="container text-center">
    <h2 class="display-4">To-Do List</h2>

    <!-- Button to toggle the To-Do List pop-out -->
    <button class="btn btn-primary fixed-left ml-3 mt-3" onclick="toggleTodoListPopup()">Toggle To-Do List</button>

    <!-- Pop-out Panel for To-Do List -->
    <div id="todoListPopup" class="todo-popup" style="display: none;">
        <div class="popup-content">
            <h3>To-Do List</h3>

            <!-- Modal for adding a new task -->
            <div id="taskModal" class="modal" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add Task</h5>
                            <button type="button" class="close" onclick="closeModal()" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <input type="text" id="taskInput" class="form-control mb-2" placeholder="New task">
                            <textarea id="taskDescription" class="form-control mb-2" placeholder="Task description" rows="3"></textarea>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="addTask()">Add</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="task-list mt-3">
                <ul id="todoList" class="list-group"></ul>
            </div>

            <div class="add-task-container">
                <button class="btn btn-success" onclick="openModal()">Add Task</button>
            </div>
        </div>
    </div>
</div>

<style>
    .todo-popup {
        position: fixed;
        top: 50px;
        left: 10px;
        width: 300px;
        height: 500px;
        background-color: #fff;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 10px;
        border-radius: 8px;
        z-index: 9999;
        overflow: hidden;
    }

    .popup-content {
        display: flex;
        flex-direction: column;
        height: 100%;
        position: relative;
    }

    .task-list {
        flex-grow: 1;
        overflow-y: auto;
        margin-bottom: 60px;
        border: 1px solid #ddd;
        padding: 5px;
        background: white;
    }

    .list-group-item {
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: normal;
        padding: 10px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 10000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-dialog {
        margin: 15% auto;
        max-width: 400px;
    }

    .delete-checkbox {
        margin-right: 10px;
        vertical-align: top;
        margin-top: 3px;
        flex-shrink: 0;
    }

    .fixed-left {
        position: fixed;
        left: 10px;
        top: 50px;
        z-index: 9999;
    }

    .add-task-container {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 10px;
        background-color: white;
        text-align: center;
        border-top: 1px solid #ddd;
    }

    .task-content {
        display: flex;
        width: 100%;
        min-width: 0; /* Allows flex items to shrink below content size */
    }

    .task-text {
        flex-grow: 1;
        text-align: left;
        display: flex;
        flex-direction: column;
        min-width: 0; /* Allows content to wrap */
    }

    .task-name {
        font-weight: bold;
        margin-bottom: 2px;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .task-description {
        font-size: 0.9em;
        color: #666;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    #todoList {
        margin-bottom: 0;
        padding-bottom: 0;
    }
</style>

<script>
    let tasks = [];

    function toggleTodoListPopup() {
        const popup = document.getElementById("todoListPopup");
        popup.style.display = popup.style.display === "block" ? "none" : "block";
    }

    function openModal() {
        document.getElementById("taskModal").style.display = "block";
    }

    function closeModal() {
        document.getElementById("taskModal").style.display = "none";
    }

    async function fetchTasks() {
        const storedTasks = localStorage.getItem('tasks');
        tasks = storedTasks ? JSON.parse(storedTasks) : [];

        const list = document.getElementById("todoList");
        list.innerHTML = "";

        tasks.forEach((task, index) => {
            const li = document.createElement("li");
            li.className = "list-group-item";
            li.setAttribute("data-index", index);

            li.innerHTML = `
                <div class="task-content">
                    <input type="checkbox" class="delete-checkbox" onclick="toggleTaskRemoval(${index})">
                    <div class="task-text">
                        <div class="task-name">${task.name}</div>
                        <div class="task-description">${task.description}</div>
                    </div>
                </div>
            `;

            li.draggable = true;
            li.ondragstart = dragStart;
            li.ondragover = dragOver;
            li.ondrop = drop;

            list.appendChild(li);
        });
    }

    function addTask() {
        const taskName = document.getElementById("taskInput").value.trim();
        const taskDescription = document.getElementById("taskDescription").value.trim();
        if (taskName) {
            tasks.push({ name: taskName, description: taskDescription });
            localStorage.setItem('tasks', JSON.stringify(tasks));
            closeModal();
            fetchTasks();

            document.getElementById("taskInput").value = '';
            document.getElementById("taskDescription").value = '';
        }
    }

    function toggleTaskRemoval(index) {
        const checkbox = document.querySelectorAll('.delete-checkbox')[index];
        if (checkbox.checked) {
            tasks.splice(index, 1);
            localStorage.setItem('tasks', JSON.stringify(tasks));
            fetchTasks();
        }
    }

    let draggedIndex = null;

    function dragStart(event) {
        draggedIndex = event.target.getAttribute("data-index");
    }

    function dragOver(event) {
        event.preventDefault();
    }

    async function drop(event) {
        event.preventDefault();
        const targetIndex = event.target.closest('.list-group-item').getAttribute("data-index");

        if (draggedIndex !== null && targetIndex !== null && draggedIndex !== targetIndex) {
            const movedTask = tasks.splice(draggedIndex, 1)[0];
            tasks.splice(targetIndex, 0, movedTask);

            localStorage.setItem('tasks', JSON.stringify(tasks));
            fetchTasks();
        }
    }

    fetchTasks();

    document.addEventListener("click", function(event) {
        const popup = document.getElementById("todoListPopup");
        const button = document.querySelector("button[onclick='toggleTodoListPopup()']");
        const popupContent = popup.querySelector('.popup-content');

        const isTaskElement = event.target.closest('.task-content') ||
                            event.target.closest('.delete-checkbox') ||
                            event.target.closest('.task-name') ||
                            event.target.closest('.task-description');

        if (!popupContent.contains(event.target) &&
            !button.contains(event.target) &&
            !isTaskElement) {
            popup.style.display = "none";
        }
    });
</script>